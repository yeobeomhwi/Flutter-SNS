name: Flutter CI

on:
  push: # 푸시 이벤트 발생 시 실행
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest



    steps:
      - name: Checkout repository #현재 레포지토리 코드 체크 아웃
        uses: actions/checkout@v3 #GitHub Actions 기본 제공 체크 아웃 액션 사용


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter #Flutter 환경 설정
        uses: subosito/flutter-action@v2 # Flutter 설치 액션

      - name: Cache dependencies # 종속성 캐싱
        uses: actions/cache@v3 # GitHub Actions 기본 제공 캐싱 액션 사용
        with:
          path: ~/.pub-cache # 캐싱할 디렉터리 경로 (Flutter 패키지 캐시)
          key: ${{ runner.os }}-pub-cache # 캐시 키 (운영체제별로 구분)
          restore-keys: |
            ${{ runner.os }}-pub-cache # 캐시 복원 키


      # 배포때 사용
      # 4. Firebase CLI 설치
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      #  # 4. Firebase CLI 인증 테스트
      - name: Verify Firebase Authentication
        env:
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: firebase projects:list --token="${{ secrets.FIREBASE_AUTH_TOKEN }}"

      - name: Install dependencies
        run: |
          flutter pub get # pubspec.yaml에 정의된 패키지 설치

#      # 단위 테스트 실행
#      - name: Run unit tests
#        run: |
#          flutter test # test 디렉터리에 있는 모든 단위 테스트 실행


      # 배포할때 실행
      - name: build...
        run: | 
          flutter build apk --debug

      # # 9. Firebase App Distribution 배포
      - name: Deploy to Firebase App Distribution
        env:
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-debug.apk \
           --app "1:304414671121:android:6cb4462e2b1e924af54cb0" \
           --groups "test" \
           --token="${{ secrets.FIREBASE_AUTH_TOKEN }}"