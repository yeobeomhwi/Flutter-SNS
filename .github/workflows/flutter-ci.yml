name: Flutter CI

on:
  push: # 푸시 이벤트 발생 시 실행
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository # 현재 레포지토리 코드 체크 아웃
        uses: actions/checkout@v3

      - name: Set up Flutter # Flutter 환경 설정
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable

      - name: Set up JDK 17 # JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache dependencies # 종속성 캐싱
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache # 캐싱할 디렉터리 경로
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }} # 고유 캐시 키
          restore-keys: |
            ${{ runner.os }}-pub-cache

      - name: Install dependencies
        run: flutter pub get # pubspec.yaml에 정의된 패키지 설치

      - name: Run unit tests # 단위 테스트 실행
        run: flutter test

      - name: Build APK # APK 빌드
        run: flutter build apk --debug

      - name: Install Firebase CLI # Firebase CLI 설치
        if: github.event_name == 'push'
        run: |
          curl -sL https://firebase.tools | bash

      - name: Verify Firebase Authentication # Firebase 인증 확인
        if: github.event_name == 'push'
        env:
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: firebase projects:list --token="${{ secrets.FIREBASE_AUTH_TOKEN }}"

      - name: Deploy to Firebase App Distribution # Firebase에 배포
        if: github.event_name == 'push'
        env:
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-debug.apk \
           --app "1:304414671121:android:6cb4462e2b1e924af54cb0" \
           --groups "test" \
           --token="${{ secrets.FIREBASE_AUTH_TOKEN }}"
